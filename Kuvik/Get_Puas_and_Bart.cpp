#include "Get_Puas_and_Bart.h"

int Get_Puasson(double liam, int t, std::mt19937 &gen1,
    std::uniform_real_distribution<> &urd1)
{
    double p; // значение случайной величины, к которой должна приближаться функция распределения
    double f = 1; // значение функции распределения
    double s = 1; // множитель для функции распределения
    int i = 0; // счётчик заявок, поступивших за очередной интервал

    p = urd1(gen1); // очередное случайное значение от 0 до 1
    p = p * (double)exp(liam * t); // домножаем на экспоненту, которую как бы вынесли за скобку суммы
    while (f < p) // идём в цикле, высчитывая число заявок (медленных машин)
    {
        i++;
        s = s * liam * t / i;
        f = f + s;
    }
    return i;
}

int Get_Bartlet(double r, double g, std::mt19937 &gen1,
    std::uniform_real_distribution<> &urd1) // теоретеческое значение лямбды и время одного интервала
{
    double p; // значение случайной величины, к которой должна приближаться функция распределения
    double f = 0; // значение функции распределения
    int i = 1; // счётчик заявок, поступивших за очередной интервал
    int flag = 0; // флаг для проверки, прошли ли мы первую итерацию
    p = urd1(gen1); // генерируем случайную величину от 0 до 1
    f = 1 - r; // проводим сравнение на первой итерации
    if (f >= p)
        flag = -1;
    else
    {
        p = (p - (1 - r)) / r / (1 - g); // выносим произведение (r * (1 - g)) за знак суммы
        f = 0; // для этого нужно учитывать первое сравнение, "забудем" первую итерацию
    }
    if (flag == 0)
    {
        while (f < p) // идём в цикле, высчитывая число заявок (быстрых машин)
        {
            i++;
            f += pow(g, i - 2);
        }
    }
    return i - 1; // возвращаем количество быстрых машин в пачке
}